[{"name":"abstract class Primitive<in T> : Matcher<T> ","description":"com.natpryce.hamkrest.Matcher.Primitive","location":"hamkrest/com.natpryce.hamkrest/-matcher/-primitive/index.html","searchKeys":["Primitive","abstract class Primitive<in T> : Matcher<T> ","com.natpryce.hamkrest.Matcher.Primitive"]},{"name":"abstract class StringMatcher<S : CaseSensitivity>(caseSensitivity: S) : Matcher.Primitive<CharSequence> ","description":"com.natpryce.hamkrest.StringMatcher","location":"hamkrest/com.natpryce.hamkrest/-string-matcher/index.html","searchKeys":["StringMatcher","abstract class StringMatcher<S : CaseSensitivity>(caseSensitivity: S) : Matcher.Primitive<CharSequence> ","com.natpryce.hamkrest.StringMatcher"]},{"name":"abstract fun describe(v: Any?): String?","description":"com.natpryce.hamkrest.ValueDescription.describe","location":"hamkrest/com.natpryce.hamkrest/-value-description/describe.html","searchKeys":["describe","abstract fun describe(v: Any?): String?","com.natpryce.hamkrest.ValueDescription.describe"]},{"name":"abstract operator override fun invoke(actual: T): MatchResult","description":"com.natpryce.hamkrest.Matcher.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/invoke.html","searchKeys":["invoke","abstract operator override fun invoke(actual: T): MatchResult","com.natpryce.hamkrest.Matcher.invoke"]},{"name":"abstract override val description: String","description":"com.natpryce.hamkrest.Matcher.description","location":"hamkrest/com.natpryce.hamkrest/-matcher/description.html","searchKeys":["description","abstract override val description: String","com.natpryce.hamkrest.Matcher.description"]},{"name":"abstract val description: String","description":"com.natpryce.hamkrest.SelfDescribing.description","location":"hamkrest/com.natpryce.hamkrest/-self-describing/description.html","searchKeys":["description","abstract val description: String","com.natpryce.hamkrest.SelfDescribing.description"]},{"name":"class Conjunction<in T>(left: Matcher<T>, right: Matcher<T>) : Matcher<T> ","description":"com.natpryce.hamkrest.Matcher.Conjunction","location":"hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/index.html","searchKeys":["Conjunction","class Conjunction<in T>(left: Matcher<T>, right: Matcher<T>) : Matcher<T> ","com.natpryce.hamkrest.Matcher.Conjunction"]},{"name":"class Disjunction<in T>(left: Matcher<T>, right: Matcher<T>) : Matcher<T> ","description":"com.natpryce.hamkrest.Matcher.Disjunction","location":"hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/index.html","searchKeys":["Disjunction","class Disjunction<in T>(left: Matcher<T>, right: Matcher<T>) : Matcher<T> ","com.natpryce.hamkrest.Matcher.Disjunction"]},{"name":"class Mismatch(val description: String) : MatchResult, SelfDescribing","description":"com.natpryce.hamkrest.MatchResult.Mismatch","location":"hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/index.html","searchKeys":["Mismatch","class Mismatch(val description: String) : MatchResult, SelfDescribing","com.natpryce.hamkrest.MatchResult.Mismatch"]},{"name":"class Negation<in T>(negated: Matcher<T>) : Matcher<T> ","description":"com.natpryce.hamkrest.Matcher.Negation","location":"hamkrest/com.natpryce.hamkrest/-matcher/-negation/index.html","searchKeys":["Negation","class Negation<in T>(negated: Matcher<T>) : Matcher<T> ","com.natpryce.hamkrest.Matcher.Negation"]},{"name":"constructor()","description":"com.natpryce.hamkrest.Matcher.Primitive.Primitive","location":"hamkrest/com.natpryce.hamkrest/-matcher/-primitive/-primitive.html","searchKeys":["Primitive","constructor()","com.natpryce.hamkrest.Matcher.Primitive.Primitive"]},{"name":"constructor(caseSensitivity: S)","description":"com.natpryce.hamkrest.StringMatcher.StringMatcher","location":"hamkrest/com.natpryce.hamkrest/-string-matcher/-string-matcher.html","searchKeys":["StringMatcher","constructor(caseSensitivity: S)","com.natpryce.hamkrest.StringMatcher.StringMatcher"]},{"name":"constructor(description: String)","description":"com.natpryce.hamkrest.MatchResult.Mismatch.Mismatch","location":"hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/-mismatch.html","searchKeys":["Mismatch","constructor(description: String)","com.natpryce.hamkrest.MatchResult.Mismatch.Mismatch"]},{"name":"constructor(left: Matcher<T>, right: Matcher<T>)","description":"com.natpryce.hamkrest.Matcher.Conjunction.Conjunction","location":"hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/-conjunction.html","searchKeys":["Conjunction","constructor(left: Matcher<T>, right: Matcher<T>)","com.natpryce.hamkrest.Matcher.Conjunction.Conjunction"]},{"name":"constructor(left: Matcher<T>, right: Matcher<T>)","description":"com.natpryce.hamkrest.Matcher.Disjunction.Disjunction","location":"hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/-disjunction.html","searchKeys":["Disjunction","constructor(left: Matcher<T>, right: Matcher<T>)","com.natpryce.hamkrest.Matcher.Disjunction.Disjunction"]},{"name":"constructor(negated: Matcher<T>)","description":"com.natpryce.hamkrest.Matcher.Negation.Negation","location":"hamkrest/com.natpryce.hamkrest/-matcher/-negation/-negation.html","searchKeys":["Negation","constructor(negated: Matcher<T>)","com.natpryce.hamkrest.Matcher.Negation.Negation"]},{"name":"fun <N : Comparable<N>> greaterThan(n: N): Matcher<N>","description":"com.natpryce.hamkrest.greaterThan","location":"hamkrest/com.natpryce.hamkrest/greater-than.html","searchKeys":["greaterThan","fun <N : Comparable<N>> greaterThan(n: N): Matcher<N>","com.natpryce.hamkrest.greaterThan"]},{"name":"fun <N : Comparable<N>> greaterThanOrEqualTo(n: N): Matcher<N>","description":"com.natpryce.hamkrest.greaterThanOrEqualTo","location":"hamkrest/com.natpryce.hamkrest/greater-than-or-equal-to.html","searchKeys":["greaterThanOrEqualTo","fun <N : Comparable<N>> greaterThanOrEqualTo(n: N): Matcher<N>","com.natpryce.hamkrest.greaterThanOrEqualTo"]},{"name":"fun <N : Comparable<N>> lessThan(n: N): Matcher<N>","description":"com.natpryce.hamkrest.lessThan","location":"hamkrest/com.natpryce.hamkrest/less-than.html","searchKeys":["lessThan","fun <N : Comparable<N>> lessThan(n: N): Matcher<N>","com.natpryce.hamkrest.lessThan"]},{"name":"fun <N : Comparable<N>> lessThanOrEqualTo(n: N): Matcher<N>","description":"com.natpryce.hamkrest.lessThanOrEqualTo","location":"hamkrest/com.natpryce.hamkrest/less-than-or-equal-to.html","searchKeys":["lessThanOrEqualTo","fun <N : Comparable<N>> lessThanOrEqualTo(n: N): Matcher<N>","com.natpryce.hamkrest.lessThanOrEqualTo"]},{"name":"fun <T : Comparable<T>> isWithin(range: ClosedRange<T>): Matcher<T>","description":"com.natpryce.hamkrest.isWithin","location":"hamkrest/com.natpryce.hamkrest/is-within.html","searchKeys":["isWithin","fun <T : Comparable<T>> isWithin(range: ClosedRange<T>): Matcher<T>","com.natpryce.hamkrest.isWithin"]},{"name":"fun <T, R> has(feature: (T) -> R, featureMatcher: Matcher<R>): Matcher<T>","description":"com.natpryce.hamkrest.has","location":"hamkrest/com.natpryce.hamkrest/has.html","searchKeys":["has","fun <T, R> has(feature: (T) -> R, featureMatcher: Matcher<R>): Matcher<T>","com.natpryce.hamkrest.has"]},{"name":"fun <T, R> has(name: String, feature: (T) -> R, featureMatcher: Matcher<R>): Matcher<T>","description":"com.natpryce.hamkrest.has","location":"hamkrest/com.natpryce.hamkrest/has.html","searchKeys":["has","fun <T, R> has(name: String, feature: (T) -> R, featureMatcher: Matcher<R>): Matcher<T>","com.natpryce.hamkrest.has"]},{"name":"fun <T, R> has(property: KProperty1<T, R>, propertyMatcher: Matcher<R>): Matcher<T>","description":"com.natpryce.hamkrest.has","location":"hamkrest/com.natpryce.hamkrest/has.html","searchKeys":["has","fun <T, R> has(property: KProperty1<T, R>, propertyMatcher: Matcher<R>): Matcher<T>","com.natpryce.hamkrest.has"]},{"name":"fun <T, U> assertThat(actual: T, criteria: (T, U) -> Boolean, other: U, message: () -> String = ::noMessage)","description":"com.natpryce.hamkrest.assertion.assertThat","location":"hamkrest/com.natpryce.hamkrest.assertion/assert-that.html","searchKeys":["assertThat","fun <T, U> assertThat(actual: T, criteria: (T, U) -> Boolean, other: U, message: () -> String = ::noMessage)","com.natpryce.hamkrest.assertion.assertThat"]},{"name":"fun <T, U> assertThat(message: String, actual: T, criteria: (T, U) -> Boolean, other: U)","description":"com.natpryce.hamkrest.assertion.assertThat","location":"hamkrest/com.natpryce.hamkrest.assertion/assert-that.html","searchKeys":["assertThat","fun <T, U> assertThat(message: String, actual: T, criteria: (T, U) -> Boolean, other: U)","com.natpryce.hamkrest.assertion.assertThat"]},{"name":"fun <T> Matcher<T>.describedBy(fn: () -> String): Matcher<T>","description":"com.natpryce.hamkrest.describedBy","location":"hamkrest/com.natpryce.hamkrest/described-by.html","searchKeys":["describedBy","fun <T> Matcher<T>.describedBy(fn: () -> String): Matcher<T>","com.natpryce.hamkrest.describedBy"]},{"name":"fun <T> absent(): Matcher<T?>","description":"com.natpryce.hamkrest.absent","location":"hamkrest/com.natpryce.hamkrest/absent.html","searchKeys":["absent","fun <T> absent(): Matcher<T?>","com.natpryce.hamkrest.absent"]},{"name":"fun <T> allElements(elementMatcher: Matcher<T>): Matcher.Primitive<Iterable<T>>","description":"com.natpryce.hamkrest.allElements","location":"hamkrest/com.natpryce.hamkrest/all-elements.html","searchKeys":["allElements","fun <T> allElements(elementMatcher: Matcher<T>): Matcher.Primitive<Iterable<T>>","com.natpryce.hamkrest.allElements"]},{"name":"fun <T> allElements(elementPredicate: (T) -> Boolean): Matcher.Primitive<Iterable<T>>","description":"com.natpryce.hamkrest.allElements","location":"hamkrest/com.natpryce.hamkrest/all-elements.html","searchKeys":["allElements","fun <T> allElements(elementPredicate: (T) -> Boolean): Matcher.Primitive<Iterable<T>>","com.natpryce.hamkrest.allElements"]},{"name":"fun <T> allOf(matchers: List<Matcher<T>>): Matcher<T>","description":"com.natpryce.hamkrest.allOf","location":"hamkrest/com.natpryce.hamkrest/all-of.html","searchKeys":["allOf","fun <T> allOf(matchers: List<Matcher<T>>): Matcher<T>","com.natpryce.hamkrest.allOf"]},{"name":"fun <T> allOf(vararg matchers: Matcher<T>): Matcher<T>","description":"com.natpryce.hamkrest.allOf","location":"hamkrest/com.natpryce.hamkrest/all-of.html","searchKeys":["allOf","fun <T> allOf(vararg matchers: Matcher<T>): Matcher<T>","com.natpryce.hamkrest.allOf"]},{"name":"fun <T> anyElement(elementMatcher: Matcher<T>): Matcher.Primitive<Iterable<T>>","description":"com.natpryce.hamkrest.anyElement","location":"hamkrest/com.natpryce.hamkrest/any-element.html","searchKeys":["anyElement","fun <T> anyElement(elementMatcher: Matcher<T>): Matcher.Primitive<Iterable<T>>","com.natpryce.hamkrest.anyElement"]},{"name":"fun <T> anyElement(elementPredicate: (T) -> Boolean): Matcher.Primitive<Iterable<T>>","description":"com.natpryce.hamkrest.anyElement","location":"hamkrest/com.natpryce.hamkrest/any-element.html","searchKeys":["anyElement","fun <T> anyElement(elementPredicate: (T) -> Boolean): Matcher.Primitive<Iterable<T>>","com.natpryce.hamkrest.anyElement"]},{"name":"fun <T> anyOf(matchers: List<Matcher<T>>): Matcher<T>","description":"com.natpryce.hamkrest.anyOf","location":"hamkrest/com.natpryce.hamkrest/any-of.html","searchKeys":["anyOf","fun <T> anyOf(matchers: List<Matcher<T>>): Matcher<T>","com.natpryce.hamkrest.anyOf"]},{"name":"fun <T> anyOf(vararg matchers: Matcher<T>): Matcher<T>","description":"com.natpryce.hamkrest.anyOf","location":"hamkrest/com.natpryce.hamkrest/any-of.html","searchKeys":["anyOf","fun <T> anyOf(vararg matchers: Matcher<T>): Matcher<T>","com.natpryce.hamkrest.anyOf"]},{"name":"fun <T> assertThat(actual: T, criteria: (T) -> Boolean, message: () -> String = ::noMessage)","description":"com.natpryce.hamkrest.assertion.assertThat","location":"hamkrest/com.natpryce.hamkrest.assertion/assert-that.html","searchKeys":["assertThat","fun <T> assertThat(actual: T, criteria: (T) -> Boolean, message: () -> String = ::noMessage)","com.natpryce.hamkrest.assertion.assertThat"]},{"name":"fun <T> assertThat(actual: T, criteria: Matcher<T>, message: () -> String = ::noMessage)","description":"com.natpryce.hamkrest.assertion.assertThat","location":"hamkrest/com.natpryce.hamkrest.assertion/assert-that.html","searchKeys":["assertThat","fun <T> assertThat(actual: T, criteria: Matcher<T>, message: () -> String = ::noMessage)","com.natpryce.hamkrest.assertion.assertThat"]},{"name":"fun <T> assertThat(message: String, actual: T, criteria: (T) -> Boolean)","description":"com.natpryce.hamkrest.assertion.assertThat","location":"hamkrest/com.natpryce.hamkrest.assertion/assert-that.html","searchKeys":["assertThat","fun <T> assertThat(message: String, actual: T, criteria: (T) -> Boolean)","com.natpryce.hamkrest.assertion.assertThat"]},{"name":"fun <T> assertThat(message: String, actual: T, criteria: Matcher<T>)","description":"com.natpryce.hamkrest.assertion.assertThat","location":"hamkrest/com.natpryce.hamkrest.assertion/assert-that.html","searchKeys":["assertThat","fun <T> assertThat(message: String, actual: T, criteria: Matcher<T>)","com.natpryce.hamkrest.assertion.assertThat"]},{"name":"fun <T> equalTo(expected: T?): Matcher<T?>","description":"com.natpryce.hamkrest.equalTo","location":"hamkrest/com.natpryce.hamkrest/equal-to.html","searchKeys":["equalTo","fun <T> equalTo(expected: T?): Matcher<T?>","com.natpryce.hamkrest.equalTo"]},{"name":"fun <T> hasElement(element: T): Matcher<Collection<T>>","description":"com.natpryce.hamkrest.hasElement","location":"hamkrest/com.natpryce.hamkrest/has-element.html","searchKeys":["hasElement","fun <T> hasElement(element: T): Matcher<Collection<T>>","com.natpryce.hamkrest.hasElement"]},{"name":"fun <T> isIn(i: Iterable<T>): Matcher<T>","description":"com.natpryce.hamkrest.isIn","location":"hamkrest/com.natpryce.hamkrest/is-in.html","searchKeys":["isIn","fun <T> isIn(i: Iterable<T>): Matcher<T>","com.natpryce.hamkrest.isIn"]},{"name":"fun <T> isIn(vararg elements: T): Matcher<T>","description":"com.natpryce.hamkrest.isIn","location":"hamkrest/com.natpryce.hamkrest/is-in.html","searchKeys":["isIn","fun <T> isIn(vararg elements: T): Matcher<T>","com.natpryce.hamkrest.isIn"]},{"name":"fun <T> present(valueMatcher: Matcher<T>? = null): Matcher<T?>","description":"com.natpryce.hamkrest.present","location":"hamkrest/com.natpryce.hamkrest/present.html","searchKeys":["present","fun <T> present(valueMatcher: Matcher<T>? = null): Matcher<T?>","com.natpryce.hamkrest.present"]},{"name":"fun <T> sameInstance(expected: T): Matcher<T>","description":"com.natpryce.hamkrest.sameInstance","location":"hamkrest/com.natpryce.hamkrest/same-instance.html","searchKeys":["sameInstance","fun <T> sameInstance(expected: T): Matcher<T>","com.natpryce.hamkrest.sameInstance"]},{"name":"fun StringMatcher<CaseSensitivity.CaseInsensitive>.caseSensitive(): StringMatcher<CaseSensitivity.CaseSensitive>","description":"com.natpryce.hamkrest.caseSensitive","location":"hamkrest/com.natpryce.hamkrest/case-sensitive.html","searchKeys":["caseSensitive","fun StringMatcher<CaseSensitivity.CaseInsensitive>.caseSensitive(): StringMatcher<CaseSensitivity.CaseSensitive>","com.natpryce.hamkrest.caseSensitive"]},{"name":"fun StringMatcher<CaseSensitivity.CaseSensitive>.caseInsensitive(): StringMatcher<CaseSensitivity.CaseInsensitive>","description":"com.natpryce.hamkrest.caseInsensitive","location":"hamkrest/com.natpryce.hamkrest/case-insensitive.html","searchKeys":["caseInsensitive","fun StringMatcher<CaseSensitivity.CaseSensitive>.caseInsensitive(): StringMatcher<CaseSensitivity.CaseInsensitive>","com.natpryce.hamkrest.caseInsensitive"]},{"name":"fun closeTo(expected: Double, error: Double = 1.0E-5): Matcher<Double>","description":"com.natpryce.hamkrest.closeTo","location":"hamkrest/com.natpryce.hamkrest/close-to.html","searchKeys":["closeTo","fun closeTo(expected: Double, error: Double = 1.0E-5): Matcher<Double>","com.natpryce.hamkrest.closeTo"]},{"name":"fun closeTo(expected: Float, error: Float = 1.0E-5f): Matcher<Float>","description":"com.natpryce.hamkrest.closeTo","location":"hamkrest/com.natpryce.hamkrest/close-to.html","searchKeys":["closeTo","fun closeTo(expected: Float, error: Float = 1.0E-5f): Matcher<Float>","com.natpryce.hamkrest.closeTo"]},{"name":"fun contains(r: Regex): Matcher<String>","description":"com.natpryce.hamkrest.contains","location":"hamkrest/com.natpryce.hamkrest/contains.html","searchKeys":["contains","fun contains(r: Regex): Matcher<String>","com.natpryce.hamkrest.contains"]},{"name":"fun containsSubstring(substring: CharSequence): StringMatcher<CaseSensitivity.CaseSensitive>","description":"com.natpryce.hamkrest.containsSubstring","location":"hamkrest/com.natpryce.hamkrest/contains-substring.html","searchKeys":["containsSubstring","fun containsSubstring(substring: CharSequence): StringMatcher<CaseSensitivity.CaseSensitive>","com.natpryce.hamkrest.containsSubstring"]},{"name":"fun describe(v: Any?): String","description":"com.natpryce.hamkrest.describe","location":"hamkrest/com.natpryce.hamkrest/describe.html","searchKeys":["describe","fun describe(v: Any?): String","com.natpryce.hamkrest.describe"]},{"name":"fun endsWith(suffix: CharSequence): StringMatcher<CaseSensitivity.CaseSensitive>","description":"com.natpryce.hamkrest.endsWith","location":"hamkrest/com.natpryce.hamkrest/ends-with.html","searchKeys":["endsWith","fun endsWith(suffix: CharSequence): StringMatcher<CaseSensitivity.CaseSensitive>","com.natpryce.hamkrest.endsWith"]},{"name":"fun equalToIgnoringCase(expected: String?): Matcher<String?>","description":"com.natpryce.hamkrest.equalToIgnoringCase","location":"hamkrest/com.natpryce.hamkrest/equal-to-ignoring-case.html","searchKeys":["equalToIgnoringCase","fun equalToIgnoringCase(expected: String?): Matcher<String?>","com.natpryce.hamkrest.equalToIgnoringCase"]},{"name":"fun hasSize(sizeMatcher: Matcher<Int>): Matcher<Collection<Any>>","description":"com.natpryce.hamkrest.hasSize","location":"hamkrest/com.natpryce.hamkrest/has-size.html","searchKeys":["hasSize","fun hasSize(sizeMatcher: Matcher<Int>): Matcher<Collection<Any>>","com.natpryce.hamkrest.hasSize"]},{"name":"fun identifierToWords(s: String): List<String>","description":"com.natpryce.hamkrest.identifierToWords","location":"hamkrest/com.natpryce.hamkrest/identifier-to-words.html","searchKeys":["identifierToWords","fun identifierToWords(s: String): List<String>","com.natpryce.hamkrest.identifierToWords"]},{"name":"fun matches(r: Regex): Matcher<CharSequence>","description":"com.natpryce.hamkrest.matches","location":"hamkrest/com.natpryce.hamkrest/matches.html","searchKeys":["matches","fun matches(r: Regex): Matcher<CharSequence>","com.natpryce.hamkrest.matches"]},{"name":"fun startsWith(prefix: CharSequence): StringMatcher<CaseSensitivity.CaseSensitive>","description":"com.natpryce.hamkrest.startsWith","location":"hamkrest/com.natpryce.hamkrest/starts-with.html","searchKeys":["startsWith","fun startsWith(prefix: CharSequence): StringMatcher<CaseSensitivity.CaseSensitive>","com.natpryce.hamkrest.startsWith"]},{"name":"infix fun <T> (T) -> Boolean.and(that: (T) -> Boolean): Matcher<T>","description":"com.natpryce.hamkrest.and","location":"hamkrest/com.natpryce.hamkrest/and.html","searchKeys":["and","infix fun <T> (T) -> Boolean.and(that: (T) -> Boolean): Matcher<T>","com.natpryce.hamkrest.and"]},{"name":"infix fun <T> (T) -> Boolean.and(that: Matcher<T>): Matcher<T>","description":"com.natpryce.hamkrest.and","location":"hamkrest/com.natpryce.hamkrest/and.html","searchKeys":["and","infix fun <T> (T) -> Boolean.and(that: Matcher<T>): Matcher<T>","com.natpryce.hamkrest.and"]},{"name":"infix fun <T> (T) -> Boolean.or(that: (T) -> Boolean): Matcher<T>","description":"com.natpryce.hamkrest.or","location":"hamkrest/com.natpryce.hamkrest/or.html","searchKeys":["or","infix fun <T> (T) -> Boolean.or(that: (T) -> Boolean): Matcher<T>","com.natpryce.hamkrest.or"]},{"name":"infix fun <T> (T) -> Boolean.or(that: Matcher<T>): Matcher<T>","description":"com.natpryce.hamkrest.or","location":"hamkrest/com.natpryce.hamkrest/or.html","searchKeys":["or","infix fun <T> (T) -> Boolean.or(that: Matcher<T>): Matcher<T>","com.natpryce.hamkrest.or"]},{"name":"infix fun <T> Matcher<T>.and(that: (T) -> Boolean): Matcher<T>","description":"com.natpryce.hamkrest.and","location":"hamkrest/com.natpryce.hamkrest/and.html","searchKeys":["and","infix fun <T> Matcher<T>.and(that: (T) -> Boolean): Matcher<T>","com.natpryce.hamkrest.and"]},{"name":"infix fun <T> Matcher<T>.and(that: Matcher<T>): Matcher<T>","description":"com.natpryce.hamkrest.and","location":"hamkrest/com.natpryce.hamkrest/and.html","searchKeys":["and","infix fun <T> Matcher<T>.and(that: Matcher<T>): Matcher<T>","com.natpryce.hamkrest.and"]},{"name":"infix fun <T> Matcher<T>.or(that: (T) -> Boolean): Matcher<T>","description":"com.natpryce.hamkrest.or","location":"hamkrest/com.natpryce.hamkrest/or.html","searchKeys":["or","infix fun <T> Matcher<T>.or(that: (T) -> Boolean): Matcher<T>","com.natpryce.hamkrest.or"]},{"name":"infix fun <T> Matcher<T>.or(that: Matcher<T>): Matcher<T>","description":"com.natpryce.hamkrest.or","location":"hamkrest/com.natpryce.hamkrest/or.html","searchKeys":["or","infix fun <T> Matcher<T>.or(that: Matcher<T>): Matcher<T>","com.natpryce.hamkrest.or"]},{"name":"inline fun <T : Any> cast(downcastMatcher: Matcher<T>): Matcher<Any>","description":"com.natpryce.hamkrest.cast","location":"hamkrest/com.natpryce.hamkrest/cast.html","searchKeys":["cast","inline fun <T : Any> cast(downcastMatcher: Matcher<T>): Matcher<Any>","com.natpryce.hamkrest.cast"]},{"name":"inline fun <T : Any> isA(downcastMatcher: Matcher<T>? = null): Matcher<Any>","description":"com.natpryce.hamkrest.isA","location":"hamkrest/com.natpryce.hamkrest/is-a.html","searchKeys":["isA","inline fun <T : Any> isA(downcastMatcher: Matcher<T>? = null): Matcher<Any>","com.natpryce.hamkrest.isA"]},{"name":"inline fun <T : Throwable> throws(exceptionCriteria: Matcher<T>? = null): Matcher<() -> Unit>","description":"com.natpryce.hamkrest.throws","location":"hamkrest/com.natpryce.hamkrest/throws.html","searchKeys":["throws","inline fun <T : Throwable> throws(exceptionCriteria: Matcher<T>? = null): Matcher<() -> Unit>","com.natpryce.hamkrest.throws"]},{"name":"interface Matcher<in T> : Function1<T, MatchResult> , SelfDescribing","description":"com.natpryce.hamkrest.Matcher","location":"hamkrest/com.natpryce.hamkrest/-matcher/index.html","searchKeys":["Matcher","interface Matcher<in T> : Function1<T, MatchResult> , SelfDescribing","com.natpryce.hamkrest.Matcher"]},{"name":"interface SelfDescribing","description":"com.natpryce.hamkrest.SelfDescribing","location":"hamkrest/com.natpryce.hamkrest/-self-describing/index.html","searchKeys":["SelfDescribing","interface SelfDescribing","com.natpryce.hamkrest.SelfDescribing"]},{"name":"interface ValueDescription","description":"com.natpryce.hamkrest.ValueDescription","location":"hamkrest/com.natpryce.hamkrest/-value-description/index.html","searchKeys":["ValueDescription","interface ValueDescription","com.natpryce.hamkrest.ValueDescription"]},{"name":"object CaseInsensitive : CaseSensitivity","description":"com.natpryce.hamkrest.CaseSensitivity.CaseInsensitive","location":"hamkrest/com.natpryce.hamkrest/-case-sensitivity/-case-insensitive/index.html","searchKeys":["CaseInsensitive","object CaseInsensitive : CaseSensitivity","com.natpryce.hamkrest.CaseSensitivity.CaseInsensitive"]},{"name":"object CaseSensitive : CaseSensitivity","description":"com.natpryce.hamkrest.CaseSensitivity.CaseSensitive","location":"hamkrest/com.natpryce.hamkrest/-case-sensitivity/-case-sensitive/index.html","searchKeys":["CaseSensitive","object CaseSensitive : CaseSensitivity","com.natpryce.hamkrest.CaseSensitivity.CaseSensitive"]},{"name":"object Companion","description":"com.natpryce.hamkrest.Matcher.Companion","location":"hamkrest/com.natpryce.hamkrest/-matcher/-companion/index.html","searchKeys":["Companion","object Companion","com.natpryce.hamkrest.Matcher.Companion"]},{"name":"object Companion","description":"com.natpryce.hamkrest.StringMatcher.Companion","location":"hamkrest/com.natpryce.hamkrest/-string-matcher/-companion/index.html","searchKeys":["Companion","object Companion","com.natpryce.hamkrest.StringMatcher.Companion"]},{"name":"object Match : MatchResult","description":"com.natpryce.hamkrest.MatchResult.Match","location":"hamkrest/com.natpryce.hamkrest/-match-result/-match/index.html","searchKeys":["Match","object Match : MatchResult","com.natpryce.hamkrest.MatchResult.Match"]},{"name":"open fun asPredicate(): (T) -> Boolean","description":"com.natpryce.hamkrest.Matcher.asPredicate","location":"hamkrest/com.natpryce.hamkrest/-matcher/as-predicate.html","searchKeys":["asPredicate","open fun asPredicate(): (T) -> Boolean","com.natpryce.hamkrest.Matcher.asPredicate"]},{"name":"open operator fun not(): Matcher<T>","description":"com.natpryce.hamkrest.Matcher.not","location":"hamkrest/com.natpryce.hamkrest/-matcher/not.html","searchKeys":["not","open operator fun not(): Matcher<T>","com.natpryce.hamkrest.Matcher.not"]},{"name":"open operator override fun invoke(actual: T): MatchResult","description":"com.natpryce.hamkrest.Matcher.Conjunction.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/invoke.html","searchKeys":["invoke","open operator override fun invoke(actual: T): MatchResult","com.natpryce.hamkrest.Matcher.Conjunction.invoke"]},{"name":"open operator override fun invoke(actual: T): MatchResult","description":"com.natpryce.hamkrest.Matcher.Disjunction.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/invoke.html","searchKeys":["invoke","open operator override fun invoke(actual: T): MatchResult","com.natpryce.hamkrest.Matcher.Disjunction.invoke"]},{"name":"open operator override fun invoke(actual: T): MatchResult","description":"com.natpryce.hamkrest.Matcher.Negation.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-negation/invoke.html","searchKeys":["invoke","open operator override fun invoke(actual: T): MatchResult","com.natpryce.hamkrest.Matcher.Negation.invoke"]},{"name":"open operator override fun not(): Matcher<T>","description":"com.natpryce.hamkrest.Matcher.Negation.not","location":"hamkrest/com.natpryce.hamkrest/-matcher/-negation/not.html","searchKeys":["not","open operator override fun not(): Matcher<T>","com.natpryce.hamkrest.Matcher.Negation.not"]},{"name":"open override fun toString(): String","description":"com.natpryce.hamkrest.MatchResult.Match.toString","location":"hamkrest/com.natpryce.hamkrest/-match-result/-match/to-string.html","searchKeys":["toString","open override fun toString(): String","com.natpryce.hamkrest.MatchResult.Match.toString"]},{"name":"open override fun toString(): String","description":"com.natpryce.hamkrest.MatchResult.Mismatch.toString","location":"hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/to-string.html","searchKeys":["toString","open override fun toString(): String","com.natpryce.hamkrest.MatchResult.Mismatch.toString"]},{"name":"open override val description: String","description":"com.natpryce.hamkrest.MatchResult.Mismatch.description","location":"hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/description.html","searchKeys":["description","open override val description: String","com.natpryce.hamkrest.MatchResult.Mismatch.description"]},{"name":"open override val description: String","description":"com.natpryce.hamkrest.Matcher.Conjunction.description","location":"hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/description.html","searchKeys":["description","open override val description: String","com.natpryce.hamkrest.Matcher.Conjunction.description"]},{"name":"open override val description: String","description":"com.natpryce.hamkrest.Matcher.Disjunction.description","location":"hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/description.html","searchKeys":["description","open override val description: String","com.natpryce.hamkrest.Matcher.Disjunction.description"]},{"name":"open override val description: String","description":"com.natpryce.hamkrest.Matcher.Negation.description","location":"hamkrest/com.natpryce.hamkrest/-matcher/-negation/description.html","searchKeys":["description","open override val description: String","com.natpryce.hamkrest.Matcher.Negation.description"]},{"name":"open override val negatedDescription: String","description":"com.natpryce.hamkrest.Matcher.Negation.negatedDescription","location":"hamkrest/com.natpryce.hamkrest/-matcher/-negation/negated-description.html","searchKeys":["negatedDescription","open override val negatedDescription: String","com.natpryce.hamkrest.Matcher.Negation.negatedDescription"]},{"name":"open val negatedDescription: String","description":"com.natpryce.hamkrest.Matcher.negatedDescription","location":"hamkrest/com.natpryce.hamkrest/-matcher/negated-description.html","searchKeys":["negatedDescription","open val negatedDescription: String","com.natpryce.hamkrest.Matcher.negatedDescription"]},{"name":"operator fun <T, S : CaseSensitivity> invoke(fn: (CharSequence, T, Boolean) -> Boolean, expected: T, sensitivity: S): StringMatcher<S>","description":"com.natpryce.hamkrest.StringMatcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-string-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T, S : CaseSensitivity> invoke(fn: (CharSequence, T, Boolean) -> Boolean, expected: T, sensitivity: S): StringMatcher<S>","com.natpryce.hamkrest.StringMatcher.Companion.invoke"]},{"name":"operator fun <T, U> invoke(fn: (T, U) -> Boolean): (U) -> Matcher<T>","description":"com.natpryce.hamkrest.Matcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T, U> invoke(fn: (T, U) -> Boolean): (U) -> Matcher<T>","com.natpryce.hamkrest.Matcher.Companion.invoke"]},{"name":"operator fun <T, U> invoke(fn: (T, U) -> Boolean, cmp: U): Matcher<T>","description":"com.natpryce.hamkrest.Matcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T, U> invoke(fn: (T, U) -> Boolean, cmp: U): Matcher<T>","com.natpryce.hamkrest.Matcher.Companion.invoke"]},{"name":"operator fun <T> invoke(fn: (CharSequence, T, Boolean) -> Boolean, expected: T): StringMatcher<CaseSensitivity.CaseSensitive>","description":"com.natpryce.hamkrest.StringMatcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-string-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(fn: (CharSequence, T, Boolean) -> Boolean, expected: T): StringMatcher<CaseSensitivity.CaseSensitive>","com.natpryce.hamkrest.StringMatcher.Companion.invoke"]},{"name":"operator fun <T> invoke(fn: (T) -> Boolean): Matcher<T>","description":"com.natpryce.hamkrest.Matcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(fn: (T) -> Boolean): Matcher<T>","com.natpryce.hamkrest.Matcher.Companion.invoke"]},{"name":"operator fun <T> invoke(name: String, feature: (T) -> Boolean): Matcher<T>","description":"com.natpryce.hamkrest.Matcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(name: String, feature: (T) -> Boolean): Matcher<T>","com.natpryce.hamkrest.Matcher.Companion.invoke"]},{"name":"operator fun <T> invoke(property: KProperty1<T, Boolean>): Matcher<T>","description":"com.natpryce.hamkrest.Matcher.Companion.invoke","location":"hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(property: KProperty1<T, Boolean>): Matcher<T>","com.natpryce.hamkrest.Matcher.Companion.invoke"]},{"name":"sealed class CaseSensitivity","description":"com.natpryce.hamkrest.CaseSensitivity","location":"hamkrest/com.natpryce.hamkrest/-case-sensitivity/index.html","searchKeys":["CaseSensitivity","sealed class CaseSensitivity","com.natpryce.hamkrest.CaseSensitivity"]},{"name":"sealed class MatchResult","description":"com.natpryce.hamkrest.MatchResult","location":"hamkrest/com.natpryce.hamkrest/-match-result/index.html","searchKeys":["MatchResult","sealed class MatchResult","com.natpryce.hamkrest.MatchResult"]},{"name":"val anything: Matcher<Any?>","description":"com.natpryce.hamkrest.anything","location":"hamkrest/com.natpryce.hamkrest/anything.html","searchKeys":["anything","val anything: Matcher<Any?>","com.natpryce.hamkrest.anything"]},{"name":"val isBlank: Matcher<CharSequence>","description":"com.natpryce.hamkrest.isBlank","location":"hamkrest/com.natpryce.hamkrest/is-blank.html","searchKeys":["isBlank","val isBlank: Matcher<CharSequence>","com.natpryce.hamkrest.isBlank"]},{"name":"val isEmpty: Matcher<Collection<Any>>","description":"com.natpryce.hamkrest.isEmpty","location":"hamkrest/com.natpryce.hamkrest/is-empty.html","searchKeys":["isEmpty","val isEmpty: Matcher<Collection<Any>>","com.natpryce.hamkrest.isEmpty"]},{"name":"val isEmptyString: Matcher<CharSequence>","description":"com.natpryce.hamkrest.isEmptyString","location":"hamkrest/com.natpryce.hamkrest/is-empty-string.html","searchKeys":["isEmptyString","val isEmptyString: Matcher<CharSequence>","com.natpryce.hamkrest.isEmptyString"]},{"name":"val isNullOrBlank: Matcher<CharSequence?>","description":"com.natpryce.hamkrest.isNullOrBlank","location":"hamkrest/com.natpryce.hamkrest/is-null-or-blank.html","searchKeys":["isNullOrBlank","val isNullOrBlank: Matcher<CharSequence?>","com.natpryce.hamkrest.isNullOrBlank"]},{"name":"val isNullOrEmptyString: Matcher<CharSequence?>","description":"com.natpryce.hamkrest.isNullOrEmptyString","location":"hamkrest/com.natpryce.hamkrest/is-null-or-empty-string.html","searchKeys":["isNullOrEmptyString","val isNullOrEmptyString: Matcher<CharSequence?>","com.natpryce.hamkrest.isNullOrEmptyString"]},{"name":"val nothing: Matcher<Any?>","description":"com.natpryce.hamkrest.nothing","location":"hamkrest/com.natpryce.hamkrest/nothing.html","searchKeys":["nothing","val nothing: Matcher<Any?>","com.natpryce.hamkrest.nothing"]}]
