$dokka.format:html-v1
$dokka.linkExtension:html
$dokka.location:com.natpryce.hamkrest.assertion////PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/index.html
$dokka.location:com.natpryce.hamkrest.assertion//assertThat/#TypeParam(bounds=[kotlin.Any?])#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function0[kotlin.String]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/assert-that.html
$dokka.location:com.natpryce.hamkrest.assertion//assertThat/#TypeParam(bounds=[kotlin.Any?])#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.Function0[kotlin.String]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/assert-that.html
$dokka.location:com.natpryce.hamkrest.assertion//assertThat/#TypeParam(bounds=[kotlin.Any?])#kotlin.reflect.KFunction2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#TypeParam(bounds=[kotlin.Any?])#kotlin.Function0[kotlin.String]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/assert-that.html
$dokka.location:com.natpryce.hamkrest.assertion//assertThat/#kotlin.String#TypeParam(bounds=[kotlin.Any?])#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/assert-that.html
$dokka.location:com.natpryce.hamkrest.assertion//assertThat/#kotlin.String#TypeParam(bounds=[kotlin.Any?])#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/assert-that.html
$dokka.location:com.natpryce.hamkrest.assertion//assertThat/#kotlin.String#TypeParam(bounds=[kotlin.Any?])#kotlin.reflect.KFunction2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest.assertion/assert-that.html
$dokka.location:com.natpryce.hamkrest////PointingToDeclaration/hamkrest/com.natpryce.hamkrest/index.html
$dokka.location:com.natpryce.hamkrest//absent/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/absent.html
$dokka.location:com.natpryce.hamkrest//allElements/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/all-elements.html
$dokka.location:com.natpryce.hamkrest//allElements/#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/all-elements.html
$dokka.location:com.natpryce.hamkrest//allOf/#kotlin.Array[com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/all-of.html
$dokka.location:com.natpryce.hamkrest//allOf/#kotlin.collections.List[com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/all-of.html
$dokka.location:com.natpryce.hamkrest//and/com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/and.html
$dokka.location:com.natpryce.hamkrest//and/com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/and.html
$dokka.location:com.natpryce.hamkrest//and/kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/and.html
$dokka.location:com.natpryce.hamkrest//and/kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/and.html
$dokka.location:com.natpryce.hamkrest//anyElement/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/any-element.html
$dokka.location:com.natpryce.hamkrest//anyElement/#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/any-element.html
$dokka.location:com.natpryce.hamkrest//anyOf/#kotlin.Array[com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/any-of.html
$dokka.location:com.natpryce.hamkrest//anyOf/#kotlin.collections.List[com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/any-of.html
$dokka.location:com.natpryce.hamkrest//anything/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/anything.html
$dokka.location:com.natpryce.hamkrest//caseInsensitive/com.natpryce.hamkrest.StringMatcher[com.natpryce.hamkrest.CaseSensitivity.CaseSensitive]#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/case-insensitive.html
$dokka.location:com.natpryce.hamkrest//caseSensitive/com.natpryce.hamkrest.StringMatcher[com.natpryce.hamkrest.CaseSensitivity.CaseInsensitive]#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/case-sensitive.html
$dokka.location:com.natpryce.hamkrest//cast/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/cast.html
$dokka.location:com.natpryce.hamkrest//closeTo/#kotlin.Double#kotlin.Double/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/close-to.html
$dokka.location:com.natpryce.hamkrest//closeTo/#kotlin.Float#kotlin.Float/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/close-to.html
$dokka.location:com.natpryce.hamkrest//contains/#kotlin.text.Regex/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/contains.html
$dokka.location:com.natpryce.hamkrest//containsSubstring/#kotlin.CharSequence/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/contains-substring.html
$dokka.location:com.natpryce.hamkrest//describe/#kotlin.Any?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/describe.html
$dokka.location:com.natpryce.hamkrest//describedBy/com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function0[kotlin.String]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/described-by.html
$dokka.location:com.natpryce.hamkrest//endsWith/#kotlin.CharSequence/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/ends-with.html
$dokka.location:com.natpryce.hamkrest//equalTo/#TypeParam(bounds=[kotlin.Any?])?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/equal-to.html
$dokka.location:com.natpryce.hamkrest//equalToIgnoringCase/#kotlin.String?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/equal-to-ignoring-case.html
$dokka.location:com.natpryce.hamkrest//greaterThan/#TypeParam(bounds=[kotlin.Comparable[^]])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/greater-than.html
$dokka.location:com.natpryce.hamkrest//greaterThanOrEqualTo/#TypeParam(bounds=[kotlin.Comparable[^]])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/greater-than-or-equal-to.html
$dokka.location:com.natpryce.hamkrest//has/#kotlin.String#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/has.html
$dokka.location:com.natpryce.hamkrest//has/#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/has.html
$dokka.location:com.natpryce.hamkrest//has/#kotlin.reflect.KProperty1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/has.html
$dokka.location:com.natpryce.hamkrest//hasElement/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/has-element.html
$dokka.location:com.natpryce.hamkrest//hasSize/#com.natpryce.hamkrest.Matcher[kotlin.Int]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/has-size.html
$dokka.location:com.natpryce.hamkrest//identifierToWords/#kotlin.String/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/identifier-to-words.html
$dokka.location:com.natpryce.hamkrest//isA/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any])]?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-a.html
$dokka.location:com.natpryce.hamkrest//isBlank/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-blank.html
$dokka.location:com.natpryce.hamkrest//isEmpty/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-empty.html
$dokka.location:com.natpryce.hamkrest//isEmptyString/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-empty-string.html
$dokka.location:com.natpryce.hamkrest//isIn/#kotlin.Array[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-in.html
$dokka.location:com.natpryce.hamkrest//isIn/#kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-in.html
$dokka.location:com.natpryce.hamkrest//isNullOrBlank/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-null-or-blank.html
$dokka.location:com.natpryce.hamkrest//isNullOrEmptyString/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-null-or-empty-string.html
$dokka.location:com.natpryce.hamkrest//isWithin/#kotlin.ranges.ClosedRange[TypeParam(bounds=[kotlin.Comparable[^]])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/is-within.html
$dokka.location:com.natpryce.hamkrest//lessThan/#TypeParam(bounds=[kotlin.Comparable[^]])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/less-than.html
$dokka.location:com.natpryce.hamkrest//lessThanOrEqualTo/#TypeParam(bounds=[kotlin.Comparable[^]])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/less-than-or-equal-to.html
$dokka.location:com.natpryce.hamkrest//matches/#kotlin.text.Regex/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/matches.html
$dokka.location:com.natpryce.hamkrest//nothing/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/nothing.html
$dokka.location:com.natpryce.hamkrest//or/com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/or.html
$dokka.location:com.natpryce.hamkrest//or/com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/or.html
$dokka.location:com.natpryce.hamkrest//or/kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/or.html
$dokka.location:com.natpryce.hamkrest//or/kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/or.html
$dokka.location:com.natpryce.hamkrest//present/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/present.html
$dokka.location:com.natpryce.hamkrest//sameInstance/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/same-instance.html
$dokka.location:com.natpryce.hamkrest//startsWith/#kotlin.CharSequence/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/starts-with.html
$dokka.location:com.natpryce.hamkrest//throws/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Throwable])]?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/throws.html
$dokka.location:com.natpryce.hamkrest/CaseSensitivity.CaseInsensitive///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-case-sensitivity/-case-insensitive/index.html
$dokka.location:com.natpryce.hamkrest/CaseSensitivity.CaseSensitive///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-case-sensitivity/-case-sensitive/index.html
$dokka.location:com.natpryce.hamkrest/CaseSensitivity///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-case-sensitivity/index.html
$dokka.location:com.natpryce.hamkrest/MatchResult.Match///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/-match/index.html
$dokka.location:com.natpryce.hamkrest/MatchResult.Match/toString/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/-match/to-string.html
$dokka.location:com.natpryce.hamkrest/MatchResult.Mismatch///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/index.html
$dokka.location:com.natpryce.hamkrest/MatchResult.Mismatch/Mismatch/#kotlin.String/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/-mismatch.html
$dokka.location:com.natpryce.hamkrest/MatchResult.Mismatch/description/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/description.html
$dokka.location:com.natpryce.hamkrest/MatchResult.Mismatch/toString/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/-mismatch/to-string.html
$dokka.location:com.natpryce.hamkrest/MatchResult///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-match-result/index.html
$dokka.location:com.natpryce.hamkrest/Matcher.Companion///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-companion/index.html
$dokka.location:com.natpryce.hamkrest/Matcher.Companion/invoke/#kotlin.String#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Companion/invoke/#kotlin.reflect.KFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Companion/invoke/#kotlin.reflect.KFunction2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Companion/invoke/#kotlin.reflect.KFunction2[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Companion/invoke/#kotlin.reflect.KProperty1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Conjunction///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/index.html
$dokka.location:com.natpryce.hamkrest/Matcher.Conjunction/Conjunction/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/-conjunction.html
$dokka.location:com.natpryce.hamkrest/Matcher.Conjunction/description/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/description.html
$dokka.location:com.natpryce.hamkrest/Matcher.Conjunction/invoke/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-conjunction/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Disjunction///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/index.html
$dokka.location:com.natpryce.hamkrest/Matcher.Disjunction/Disjunction/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/-disjunction.html
$dokka.location:com.natpryce.hamkrest/Matcher.Disjunction/description/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/description.html
$dokka.location:com.natpryce.hamkrest/Matcher.Disjunction/invoke/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-disjunction/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Negation///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-negation/index.html
$dokka.location:com.natpryce.hamkrest/Matcher.Negation/Negation/#com.natpryce.hamkrest.Matcher[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-negation/-negation.html
$dokka.location:com.natpryce.hamkrest/Matcher.Negation/description/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-negation/description.html
$dokka.location:com.natpryce.hamkrest/Matcher.Negation/invoke/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-negation/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher.Negation/negatedDescription/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-negation/negated-description.html
$dokka.location:com.natpryce.hamkrest/Matcher.Negation/not/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-negation/not.html
$dokka.location:com.natpryce.hamkrest/Matcher.Primitive///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-primitive/index.html
$dokka.location:com.natpryce.hamkrest/Matcher.Primitive/Primitive/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/-primitive/-primitive.html
$dokka.location:com.natpryce.hamkrest/Matcher///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/index.html
$dokka.location:com.natpryce.hamkrest/Matcher/asPredicate/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/as-predicate.html
$dokka.location:com.natpryce.hamkrest/Matcher/description/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/description.html
$dokka.location:com.natpryce.hamkrest/Matcher/invoke/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/invoke.html
$dokka.location:com.natpryce.hamkrest/Matcher/negatedDescription/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/negated-description.html
$dokka.location:com.natpryce.hamkrest/Matcher/not/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-matcher/not.html
$dokka.location:com.natpryce.hamkrest/SelfDescribing///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-self-describing/index.html
$dokka.location:com.natpryce.hamkrest/SelfDescribing/description/#/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-self-describing/description.html
$dokka.location:com.natpryce.hamkrest/StringMatcher.Companion///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-string-matcher/-companion/index.html
$dokka.location:com.natpryce.hamkrest/StringMatcher.Companion/invoke/#kotlin.reflect.KFunction3[kotlin.CharSequence,TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean,kotlin.Boolean]#TypeParam(bounds=[kotlin.Any?])#TypeParam(bounds=[com.natpryce.hamkrest.CaseSensitivity])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-string-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/StringMatcher.Companion/invoke/#kotlin.reflect.KFunction3[kotlin.CharSequence,TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean,kotlin.Boolean]#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-string-matcher/-companion/invoke.html
$dokka.location:com.natpryce.hamkrest/StringMatcher///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-string-matcher/index.html
$dokka.location:com.natpryce.hamkrest/StringMatcher/StringMatcher/#TypeParam(bounds=[com.natpryce.hamkrest.CaseSensitivity])/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-string-matcher/-string-matcher.html
$dokka.location:com.natpryce.hamkrest/ValueDescription///PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-value-description/index.html
$dokka.location:com.natpryce.hamkrest/ValueDescription/describe/#kotlin.Any?/PointingToDeclaration/hamkrest/com.natpryce.hamkrest/-value-description/describe.html
com.natpryce.hamkrest
com.natpryce.hamkrest.assertion

